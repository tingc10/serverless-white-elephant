# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: white-elephant
# app and org for use with dashboard.serverless.com
app: white-elephant
org: tingc10

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  prune:
    automatic: true
    number: 3
  client:
    bucketName: white-elephant-exchange
    distributionFolder: ../client/build
    errorDocument: index.html

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-offline
  - serverless-finch

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    USER_ROOMS_GSI: UserRooms
    STAGE_ENV: ${self:provider.stage}
  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can add CloudFormation resource templates here
resources:
  Resources:
    WhiteElephant:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        # Defines names for keys
        AttributeDefinitions:
          - AttributeName: pk
            # Type String
            AttributeType: S
          - AttributeName: sk
            # Type String
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: roomCode
            AttributeType: S
        # Defines the roles of keys
        KeySchema:
          # KeyType HASH defines partition key
          - AttributeName: pk
            KeyType: HASH
          # KeyType RANGE defines sort key
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ROOMS_GSI}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: roomCode
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

functions:
  query:
    handler: src/handler.graphql
    events:
      - http:
          path: graphql
          method: any
